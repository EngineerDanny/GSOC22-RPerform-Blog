{
  
    
        "post0": {
            "title": "What I did to ensure that R CMD Check on Rperform runs successfully",
            "content": "INTRODUCTION . When it comes to publishing an R package, it is very prerequisite and crucial for the package to pass R CMD Check. R CMD Check is basically a test performed on an R package to check code for common problems whilst suggesting ways of fixing them. This means that it is also great tool to even utilize during the whole development process of a package. R CMD Checks comprises of about 50 different tests which are explained here . RUNNING R CMD CHECK LOCALLY . Running R CMD Check on Rperform is a simple task. During development, it can be run locally by using the famous devtools package. . devtools::check() . Also, the R Studio IDE has in-built features which makes it easy to run R CMD Checks right inside the IDE. Under Build section, there is a check button which does that. Using various methods above is synonymous to running the following command on the R console: . R CMD check Rperform . However, when developers need to share or collaborate on a project, the check comes in handy if it can be run online in a container for everyone to see the results. It is more challenging to set-up the checks to run online. Mostly, this approach is used when the need arises to run R CMD check every time changes are made in code. Since we use GitHub, it is recommended that we do that with Github Actions. There are others such as Travis CI and Appveyor but we will stick with Github Actions due to its simplicity and power. In addition to that, it implements modern technologies with vast functionalities and growing community. . It must be taken note that running R CMD Check on any package will return only three types of notices: . ERRORS : These are issues which are very fatal and likely to cause the package or its dependencies to fail to install. . WARNINGS : Warnings are statements that are made to caution the developer to take note of certain vital issues. These issues are unlikely to be detrimental to the package but it is very crucial to not ignore them. . NOTES : Notes are not crucial issues. They are just mild problems which are meant for developers to take note of. . R CMD Check passes successfully when none of the above notices are returned . R CMD CHECK USING GITHUB ACTIONS . GitHub Actions is an open-source technology that makes it easy for automation of software workflows. It has exceptional Continuous Integration/ Continuous Deployment (CI/CD) tools which enables developers to build, test and deploy code right from their GitHub repositories. . It is very exciting that the R community has a number of repositories of Github Actions which can be used to perform any variety of CI tasks for R projects with example workflows. In Rperform, we use the following actions sequencially : . actions/checkout - Checks out your repository to the $GITHUB_WORKSPACE so that repository’s workflow can utilize it. | r-lib/actions/setup-r - Sets up an R environment for use in GitHub Actions by basically downloading and caching a version of R. | r-lib/actions/setup-r-dependencies - Downloads and installs all the packages declared in the DESCRIPTION file. | r-lib/actions/check-r-package - Runs R CMD check on an R package. | If every check passes without any discrepancies, it implies that the package is stable. However, if any of the check fails, detailed logs will be shown at the end of every action for you to rectify this issue. It can be very confusing at first when some of the checks fail but with a little bit of debugging and testing, you can get the package to pass. When you check my workflow history on my Rperform repository here, you would notice that I have about 50% failed workflow runs. I wrote an article describing a total review of how I went about fixing the issues with Rperform’s initial dependencies. At that time, I had successive workflow failures (From R-CMD-check #17 to R-CMD-check #21 ). After fixing the various issues that popped up, I submitted a Pull Request explaining the series of failures and the steps I took to fix them. . I will be diving deep into the PR to explain some of the issues encountered. . . From the Check-RPerform #3, Github showed a visual evidence that points to r-lib/actions/check-r-package as the specific action that failed. . Initially, the issue was invalid link in the test-repo-metrics.R file. I found out that the hadley/stringr link does not exist. Even though, when you open the link you will be redirected to the actual repository which is the tidyverse/stringr. . My test results were inconsistent (Failing more times and occassionally passing) due to this issue. Therefore, I changed the github link to tidyverse/stringr After running Rperform check locally, even though the test didn’t explicitly give me an error, it failed. The only warning was : . checking Rd cross-references … WARNING Missing link or links in documentation object ‘Rperform-package.Rd’: ‘[git2r:git2r-package]{git2r}’ . See section ‘Cross-references’ in the ‘Writing R Extensions’ manual. . I fixed the warning by inserting the git2r official github link. . Although the issue with the link was fixed and R CMD Check on my local machine passed, the GitHub CI action still failed. So I started to dig into the tidyverse/stringr package tests. . Inside the https://github.com/tidyverse/stringr/blob/main/tests/testthat/test-dup.r file, there are three tests which are ran internally. . . As shown above, all the other tests passed except the uses tidyverse recycling rules test. This led to my conclusion that, this may be an internal issue with the tidyverse/stringr package. . The first two tests however, could be used in checking Rperform. . FINAL FIX . After several debugging and testing, I finally found the final error that was causing the Rperform R CMD Check test to fail on GitHub CI. It turns out that during my adventures and explorations, I mistakenly created a file( [tests/testthat/test-plot-metrics.R]) on the master branch. . . As recorded from the logs above, in the file, there is an issue with the str_c function because it does not exist. Therefore, I removed this file since it’s not needed. It was created for experimental purposes. . After fixing all the issues, all the checks passed ✅ withCheck-RPerform #11 workflow run. . CONCLUSION . During my tests, I realized the cause of the inconsistencies in my workflow results. When running R CMD Check locally, I noticed that if your internet network is slow, because the dependencies and other stuffs can not be downloaded, the test will pass with no warnings or errors. This may be a flaw in the R CMD Check tool. It can lead to false positives. The main reason why I didn’t notice the mistakenly created file locally was because I was on another branch (test-pkg) instead of the main branch (master). The file was rather created on the master branch. . R CMD Checks are very crucial to the success of a package especially when the package is to be published on CRAN. When a package passes the checks with no errors, warnings and notes, there would be no need for human intervention before the package is published on CRAN. .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/rperform/test/r/2022/06/24/RPerform-R-CMD-Check.html",
            "relUrl": "/rperform/test/r/2022/06/24/RPerform-R-CMD-Check.html",
            "date": " • Jun 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Updating the dependencies in Rperform.",
            "content": "Introduction . In R, it is the main purpose of the DESCRIPTION file to convey the metadata about a package. It is also needed to list all the dependencies that the package uses. Inside the DESCRIPTION file, there are Imports and Suggests section under which, you can list your dependencies. There is a minor difference between the two. The packages under Imports are needed by your users at runtime. Packages under Suggests however, may be optional because it is either used for development or optional functionalities. There was a major issue with the major dependencies used by Rperform. The issue was that, the versions of the dependencies used were too old and one of the them was discontinued. . The git2r package . The git2r package is a popular R package which is mainly known for using git with R. It gives users programmatic experience with git using R. It is very fast because it implements git core methods developed with C. As the developers of the package improved and updated the package, they made a breaking transition. They made a change in support from S4 objects to S3 objects. A simple fix to this issue will be to pin the version of the package to specific versions in the DESCRIPTION file. However, a lot of developers have always install the latest versions of packages. As I tested Rperform for the first time, I had the issue. This is the error I had : . &gt; plot_metrics(test_path = &quot;tests/testthat/test-join.r&quot;, metric = &quot;time&quot;, num_commits = 2, save_data = FALSE, save_plots = FALSE) Error in base::substr(commit_val@summary, start = 1, stop = 15) : trying to get slot &quot;summary&quot; from an object (class &quot;git_commit&quot;) that is not an S4 object . Analyzing the error message suggests that the program is trying to get a property from an object which is not S4 object but rather S3 object. The actual issue was that my git2r version was the latest version. For some reason, the package version which should have been pinned to be &lt;= version 0.21.0 was ignored by my program. The fact is that, the latest git2r package has a lot of new features and fixes. The first task I had to do was updating Rperform to also support the newer versions of git2r so as to make it easier for other developers to use and test the package. I updated the git2r version to (&gt;= 0.30.1) in the DESCRIPTION file so it made some functions in the code obsolete. First of all, the names of some functions were updated. Refactoring the code was not difficult but running through the documentation of the git2r package and checking the newer functions proved to be a little challenging and time consuming. First major change I had to make was replace the head function to repository_head function. This function basically gets the HEAD of a repository. . # From &gt; repo_head &lt;- git2r::head(repo) . # To &gt; repo_head &lt;- git2r::repository_head(repo) . Also, I had to check all the functions related to the issue to be compatible to S3 objects. Just to name a few, some of them are : . # From &gt; base::substr(commit_val@summary, start = 1, stop = 15) &gt; repo_head@name . # To &gt; base::substr(commit_val$summary, start = 1, stop = 15) &gt; repo_head$name . Initially, I used numeric indexes to reference list members. I switched to using named reference approach to reference list members by names instead of numeric indexes because it was less error prone. With most of the changes just like above examples, I just had to replace the @ symbol with the $ symbol. Others were a little more complex than that. . The Animint dependency . The animint package is a forked version of the ggplot2 with improved features. It enables developers to design multi-plot, multi-layer, interactive and animated data visualizations. Unfortunately, the original version has been discontinued. Even though, it was an optional package in the root DESCRIPTION file, it was worth looking into. However, my attention only drew to it when I was running a CMD R Check on the Rperform package and it failed. The Github CI test showed that it is not possible to install it because it could not recognize the package. After digging into the issue, I realized the package has been discontinued. Fast forward, there is an updated version called the animint2 which comes with easier installation and better syntax. Therefore I updated the package to animint2 in the DESCRIPTION file. Then, I checked and tested all the functions that depend on the animint2 package. Most of them had to do with just replacing animint with animint2. . # From &gt; animint::theme_animint(height = 700) &gt; animint::animint2dir(plot.list = viz.list, out.dir = paste0(basename(getwd()), &quot;_&quot;, &quot;time_animint&quot;)) . # To &gt; animint2::theme_animint(height = 700) &gt; animint2::animint2dir(plot.list = viz.list, out.dir = paste0(basename(getwd()), &quot;_&quot;, &quot;time_animint&quot;)) . Fix dependency and related issues . After all the changes and updates, I opened a Pull Request to address the issues. PR#2 and PR#3. As it was a pending issue raised twice on the main repository. These combined PRs close issues #44 and #45. . Conclusion . I have realized that the dependencies that our projects utilize are very crucial to the development of the package and its users. At first, I nearly gave up on the Rperform package because of it’s support for old dependencies which were not already installed and for some reason could not get installed on my computer. Updating dependencies ensures the package gets access to the latest features, improvements and bug fixes. Downgrading the git2r dependency was a temporal fix, updating and ensuring that all related issues are fixed became the permanent fix. .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/rperform/performance/test/r/git/github/2022/06/20/Updating-dependencies-In-Rperform.html",
            "relUrl": "/rperform/performance/test/r/git/github/2022/06/20/Updating-dependencies-In-Rperform.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fixes to some of the compilation errors of Rperform",
            "content": "ABSTRACT . The main goal of the RPerform library is to make performance tests on R packages easier with GitHub. However, currently, the initial version of the RPerform library is outdated in the sense that you would need to improvise before you attempt to test RPerform. This article explains all the potential errors, issues and bugs you might encounter and how to solve them before you run the package. . The test package that is used to test the Rperform library is the stringr (https://github.com/tdhock/stringr) package. Installation of the library has been discussed in the previous articles. Use the library(Rperform) command to load the library. The following command initializes the library by setting the working directory. . setwd(dir= &quot;/Users/newuser/Projects/RProjects/stringr&quot;) . DIRECTORY ISSUES . - Working directory error . The first error which might be thrown is : . Error in setwd(dir= &quot;/Users/newuser/Projects/RProjects/stringe&quot;) : cannot change working directory . The dir argument must be set to the directory of the package or project you want to test. . - test-join directory error . There has been an update with the stringr repository. test-join.r is not in the tests/testthat directory. The new directory is inst/tests/test-join.r . Also, all the files in inst/tests/ directory must be taken note. Misrepresenting them will result in errors. Hence, this implies that running : . plot_metrics(test_path = &quot;tests/testthat/test-join.r&quot;, metric = &quot;time&quot;, num_commits = 10, save_data = FALSE, save_plots = FALSE) . will throw the error : . Error in file(con , &quot;r&quot;) : cannot open file &quot;tests/testthat/test-join.r&quot; : No such file or directory . Instead, run : . plot_metrics(test_path = &quot;inst/tests/test-join.r&quot;, metric = &quot;time&quot;, num_commits = 10, save_data = FALSE, save_plots = FALSE) . MISSING PACKAGES . These are the packages that Rperform depends on. Not having it pre-installed may prevent you from running the package. We proceed by discussing the relevant dependencies and how to install them. . git2r : The git2r package gives developers access to Git repositories from R. The package uses the libgit2 library which is a C implementation of the Git core methods. Therefore it allows developers to write native speed custom Git applications in any language that supports C bindings. . To install the development version of git2r. You can use : . install.packages(&quot;git2r&quot;) . it’s easiest to use the devtools package: . # install.packages(&quot;devtools&quot;) library(devtools) install_github(&quot;ropensci/git2r&quot;) . ggplot2 : The ggplot2 is an R package used for plotting graphs. It provides useful commands that helps to create complex plots from data in a data frame. It enables quality plots to be created with minimal coding, tweaking and adjustments. The package is therefore necessary for Rperform to visualize performance metrics. It provides an interface for determining what variables to plot and how they are shown to the user. Organized data saves massive time when using the package to make figures. . # The easiest way to get ggplot2 is to install the whole tidyverse: install.packages(&quot;tidyverse&quot;) # Alternatively, install just ggplot2: install.packages(&quot;ggplot2&quot;) # Or the development version from GitHub: install.packages(&quot;devtools&quot;) devtools::install_github(&quot;tidyverse/ggplot2&quot;) . CONCLUSION . It is very crucial to adequately set up the package for testing. Some of the errors have been discussed and solutions have also been proposed. It is advisable to always follow the documentation for latest the updates. .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/rperform/test/r/2022/06/13/Rperform-Compilation-Errors-And-Fixes.html",
            "relUrl": "/rperform/test/r/2022/06/13/Rperform-Compilation-Errors-And-Fixes.html",
            "date": " • Jun 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Testing Touchstone with a simple For Loop",
            "content": "Introduction . I did a minimal testing of touchstone by using a simple for loop. Therefore, I created a simple R package repository on GitHub called TouchTest . Inside the script.R file, there exists a function touchstone::benchmark_run which helps to benchmark any function call from the package. . To make it simple to test the minimal functionality of touchstone, I modified the function and wrote the for loop inside a random_test function. . Test . On the main branch, inside the script.R file, we basically loop from 1 to 10 printing the current number. . # benchmark a function call from your package (two calls per branch) touchstone::benchmark_run( # expr_before_benchmark = source(&quot;dir/data.R&quot;), #&lt;-- TODO OTPIONAL setup before benchmark random_test = function() { print(&quot;Hello, world!&quot;) # Loop from 1 to 10 for (i in 1:10) { print(i) } }, #&lt;- TODO put the call you want to benchmark here n = 2 ) . However, onn the devel branch, there is a minor change in the for loop. We print from 1 to 100 instead. . # benchmark a function call from your package (two calls per branch) touchstone::benchmark_run( # expr_before_benchmark = source(&quot;dir/data.R&quot;), #&lt;-- TODO OTPIONAL setup before benchmark random_test = function() { print(&quot;Hello, world!&quot;) # Loop from 1 to 100 for (i in 1:100) { print(i) } }, #&lt;- TODO put the call you want to benchmark here n = 2 ) . Results . It is quite obvious that the 1 to 100 loop will take longer time than the 1 to 10 loop. Inside the touchstone directory, plots and pr-comment folders are created naturally containing the image of the plot and the PR comment text respectively. Below shows the results as expected. . . The graph above demonstrates the visualizations of the distribution of the timings for both branches. It can be inferred from the graph above that the density of the devel branch is greater than that of the main branch. This is due to the fact that the devel branch entails looping 100 times whereas the main branch entails looping just 10 times. . Benchmark result is posted as a comment in the Pull Request. An example is shown below : . . This is how benchmark results would change (along with a 95% confidence interval in relative change) if b61b5addb59ac69eca91ee97caf7e5f5ef986aed is merged into main: .   :ballot_box_with_check:random_test: 1.24µs -&gt; 1.3µs [-5.9%, +15.17%] Further explanation regarding interpretation and methodology can be found in the documentation. | . . The results can be interpreted as an increase in time by approximately 15.17% from the devel branch when compared to the main branch. To avoid any uncertainties, under the hood, the code is run n times based on the confidence interval. The confidence interval shows the certainties about any estimated differences. Hence, a 0.95 confidence interval tells that if the benchmarking experiment were to be repeated 100 times, the estimated change in speed would be in the interval 95 out of 100 times. The graph generally gets noisy when there is no significant speed change. . Therefore, merging a Pull Request of such nature will mean that the code will be a little bit slower. However, checking from the speed decrease implies that it will hardly be noticed practically. There is always a trade-off between time and functionality especially when a new feature is introduced in a code. This is the reason why the Confidence Interval is very crucial with regards to code benchmarking. . Conclusion . Even though, the touchstone package is an experimental R package, it aims on providing the means to perform accurate benchmarking tests for package developers. Due to the fact that Pull requests are natural units for measuring speed, connecting benchmarking to pull requests makes it easier and faster to use. .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/touchstone/test/r/git/github/2022/06/02/Touchstone-Test-1.html",
            "relUrl": "/touchstone/test/r/git/github/2022/06/02/Touchstone-Test-1.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Reviewing The Touchstone R Package",
            "content": "1. Introduction . Touchstone is an R tool which provides accurate benchmarking features for testing other R packages. It provides continuous benchmarking with reliable relative measurement and uncertainty reporting. It is enriched with features which are very useful especially with respect to merging a Pull Request into target branch. Therefore, it is integrated with GitHub Continuous Integration(CI) which helps to automate the whole process. . 2. Concept . For your PR branch and the target branch, touchstone will : . build two versions of the package in isolated libraries. | measure the accurate relative differences between the branches. The code under experimentation will be run several times in a random order. | comment the results of the benchmarking on the Pull Request. | create visualizations to demonstrate the distribution of the timings for both branches. | . 3. Installation . Installation can be done in two ways : . CRAN : install.packages(&quot;touchstone&quot;) . | GitHub : devtools::install_github(&quot;lorenzwalthert/touchstone&quot;) . | . 4. Package Usage . Initialize touchstone by running . touchstone::use_touchstone() . The above line of code will : . Create a directory known as the touchstone directory in the root of the repository with config.json and script.R. The config.json contains configurations that define how to run your benchmark. The script.R is the script that runs the benchmark. The header.R contains the default PR header whilst the footer.R containing the default PR comment footer. . | Populate the file touchstone-receive.yaml in .github/workflows/. and touchstone-comment.yaml in .github/workflows/ respectively. . | Add the touchstone directory to .Rbuildignore file in the root directory of your repository. . | . Write the workflow files you need to invoke touchstone in new pull requests into .github/workflows/. . Modify the touchstone script touchstone/script.R to run different benchmarks. . 5. Understanding the script . There are three default functions inside the script.R file. . (i) branch_install . touchstone::branch_install() . branch_install installs each branch in a separate library for isolation. . Usage . branch_install( branches = c(branch_get_or_fail(&quot;GITHUB_BASE_REF&quot;), branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;)), path_pkg = &quot;.&quot;, install_dependencies = FALSE ) . The arguments : branches are names of the branches in character vector path_pkg represents the path to the package which has a default value of &quot;.&quot; install_dependencies is a boolean which enables dependencies to be installed, has a default value of FALSE . (ii) benchmark_run . touchstone::benchmark_run() . benchmark_run runs benchmarks for git branches using function calls from your package. . Usage . benchmark_run( expr_before_benchmark = { }, ..., branches = c(branch_get_or_fail(&quot;GITHUB_BASE_REF&quot;), branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;)), n = 100, path_pkg = &quot;.&quot; ) . The arguments : expr_before_benchmark allows an expression to be executed just before benchmark is run ... is the named expression of length one with code to benchmark branches are names of the branches in character vector n is the number of times benchmarks should be run for each of the branches. path_pkg represents the path to the package . (ii) benchmark_analyze . touchstone::benchmark_analyze() . benchmark_analyze creates artifacts used downstream in the GitHub Action to turn raw benchmark results into text and figures. . Usage . benchmark_analyze( branches = c(branch_get_or_fail(&quot;GITHUB_BASE_REF&quot;), branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;)), names = NULL, ci = 0.95 ) . The arguments : branches are the names of the branches in character vector under consideration names are the names of the branches which is actually used for the analysis. ci represents the confidence level which defaults to 0.95 out of 1 . 6. Running the script . On the R Interactive console, run . touchstone::run_script() . Usage . run_script( path = &quot;touchstone/script.R&quot;, branch = branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;) ) . The arguments : path is the path to the script to run branch is the name of the branch corresponding to the library . After committing and pushing the workflow files to default branch, Github CI will run the benchmarks on every pull request and on each commit while that pull request is open. .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/touchstone/test/r/git/github/2022/06/01/Touchstone-Review.html",
            "relUrl": "/touchstone/test/r/git/github/2022/06/01/Touchstone-Review.html",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Sample RPerform package usage",
            "content": "Introduction . Rperform is a package that allows R developers to track quantitative performance metrics of their code. It helps to provide changes in a package’s performance metrics related to runtime and memory. It is used to access performance metrics over different git versions and across git branches. It can also be integrated with Travis-CI for performance testing during Travis builds by making changes to the repo’s .travis.yml file. It can prove to be particularly useful while measuring the possible changes which can be introduced by a pull request (PR). . The project was initiated as a part of the Google Summer of Code 2015 program and was accepted into the Google Summer of Code 2016 program. . Installation . You can install the package from github using : | . library(devtools) install_github(&quot;analyticalmonk/Rperform&quot;) . or . devtools::install_github(&quot;analyticalmonk/Rperform&quot;) . Basic examples . NOTE: The Rperform package requires you to set the current directory to the concerned git repository before using the functions. . &gt; setwd(dir = &quot;Path/to/repo&quot;) . The following example illustrates the use of the Rperform::plot_metrics() function on the git repository of the package stringr. | . &gt; setwd(&quot;./stringr&quot;) &gt; library(Rperform) &gt; plot_metrics(test_path = &quot;tests/testthat/test-join.r&quot;, metric = &quot;time&quot;, num_commits = 10, save_data = FALSE, save_plots = FALSE) . . The following example illustrates the use of the Rperform::plot_branchmetrics() function on the git repository of the package stringr. | . &gt; setwd(&quot;./stringr&quot;) &gt; library(Rperform) &gt; plot_branchmetrics(test_path = &quot;tests/testthat/test-interp.r&quot;, metric = &quot;memory&quot;, branch1 = &quot;rperform_test&quot;, branch2 = &quot;master&quot;, save_data = F, save_plots = F) . . The following example illustrates the use of the Rperform::time_compare() and Rperform::mem_compare() functions on the git repository of the package stringr. | . &gt; setwd(&quot;./stringr&quot;) &gt; library(Rperform) &gt; time_compare(test_path = &quot;./tests/testthat/test-dup.r&quot;, num_commits = 2) test_name metric_name status metric_val msg_val date_time 1 basic duplication works time pass 0.001797014 Can now use CRA 2015-01-08 14:09:43 2 basic duplication works time pass 0.001539050 Can now use CRA 2015-01-08 14:09:43 3 basic duplication works time pass 0.001545034 Can now use CRA 2015-01-08 14:09:43 4 0 duplicates equals empty string time pass 0.001019430 Can now use CRA 2015-01-08 14:09:43 5 0 duplicates equals empty string time pass 0.000784386 Can now use CRA 2015-01-08 14:09:43 6 0 duplicates equals empty string time pass 0.000766279 Can now use CRA 2015-01-08 14:09:43 7 test-dup.r time pass 0.003555478 Can now use CRA 2015-01-08 14:09:43 8 test-dup.r time pass 0.003118946 Can now use CRA 2015-01-08 14:09:43 9 test-dup.r time pass 0.003106017 Can now use CRA 2015-01-08 14:09:43 10 basic duplication works time pass 0.001780849 Require latest 2015-01-08 14:03:37 11 basic duplication works time pass 0.001545568 Require latest 2015-01-08 14:03:37 12 basic duplication works time pass 0.001517300 Require latest 2015-01-08 14:03:37 13 0 duplicates equals empty string time pass 0.001028882 Require latest 2015-01-08 14:03:37 14 0 duplicates equals empty string time pass 0.000783847 Require latest 2015-01-08 14:03:37 15 0 duplicates equals empty string time pass 0.000771520 Require latest 2015-01-08 14:03:37 16 test-dup.r time pass 0.003436051 Require latest 2015-01-08 14:03:37 17 test-dup.r time pass 0.003130397 Require latest 2015-01-08 14:03:37 18 test-dup.r time pass 0.003082713 Require latest 2015-01-08 14:03:37 &gt; . &gt; Rperform::mem_compare(test_path = &quot;./tests/testthat/test-join.r&quot;, num_commits = 1) test_name metric_name status metric_val msg_val date_time 11.1 basic case works max_mem_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 11.2 basic case works leak_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 11.3 NULLs are dropped max_mem_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 11.4 NULLs are dropped leak_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 11.5 test-join.r max_mem_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 11.6 test-join.r leak_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 12.1 basic case works max_mem_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 12.2 basic case works leak_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 12.3 NULLs are dropped max_mem_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 12.4 NULLs are dropped leak_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 12.5 test-join.r max_mem_mb pass 0.144 Can now use CRA 2015-01-08 14:09:43 12.6 test-join.r leak_mb pass 0.144 Can now use CRA 2015-01-08 14:09:43 13.1 basic case works max_mem_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 13.2 basic case works leak_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 13.3 NULLs are dropped max_mem_mb pass 0.048 Can now use CRA 2015-01-08 14:09:43 13.4 NULLs are dropped leak_mb pass 0.048 Can now use CRA 2015-01-08 14:09:43 13.5 test-join.r max_mem_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 13.6 test-join.r leak_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/rperform/test/r/2022/05/24/RPerform.html",
            "relUrl": "/rperform/test/r/2022/05/24/RPerform.html",
            "date": " • May 24, 2022"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}