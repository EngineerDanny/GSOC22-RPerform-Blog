{
  
    
        "post0": {
            "title": "Reviewing The Touchstone R Package",
            "content": "1. Introduction . Touchstone is an R tool which provides accurate benchmarking features for testing other R packages. It provides continuous benchmarking with reliable relative measurement and uncertainty reporting. It is enriched with features which are very useful especially with respect to merging a Pull Request into target branch. Therefore, it is integrated with GitHub Continuous Integration(CI) which helps to automate the whole process. . 2. Concept . For your PR branch and the target branch, touchstone will : . build two versions of the package in isolated libraries. | measure the accurate relative differences between the branches. The code under experimentation will be run several times in a random order. | comment the results of the benchmarking on the Pull Request. | create visualizations to demonstrate the distribution of the timings for both branches. | . 3. Installation . Installation can be done in two ways : . CRAN : install.packages(&quot;touchstone&quot;) . | GitHub : devtools::install_github(&quot;lorenzwalthert/touchstone&quot;) . | . 4. Usage . Initialize touchstone by running . touchstone::use_touchstone() . The above line of code will : . Create a directory known as the touchstone directory in the root of the repository with config.json and script.R. The config.json contains configurations that define how to run your benchmark. The script.R is the script that runs the benchmark. The header.R contains the default PR header whilst the footer.R containing the default PR comment footer. . | Populate the file touchstone-receive.yaml in .github/workflows/. and touchstone-comment.yaml in .github/workflows/ respectively. . | Add the touchstone directory to .Rbuildignore file in the root directory of your repository. . | . Write the workflow files you need to invoke touchstone in new pull requests into .github/workflows/. . Modify the touchstone script touchstone/script.R to run different benchmarks. . 5. Understanding the script . There are three default functions inside the script.R file. . (i) branch_install . touchstone::branch_install() . branch_install installs each branch in a separate library for isolation. . Usage . branch_install( branches = c(branch_get_or_fail(&quot;GITHUB_BASE_REF&quot;), branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;)), path_pkg = &quot;.&quot;, install_dependencies = FALSE ) . The arguments : branches are names of the branches in character vector path_pkg represents the path to the package which has a default value of &quot;.&quot; install_dependencies is a boolean which enables dependencies to be installed, has a default value of FALSE . (ii) benchmark_run . touchstone::benchmark_run() . benchmark_run runs benchmarks for git branches using function calls from your package. . Usage . benchmark_run( expr_before_benchmark = { }, ..., branches = c(branch_get_or_fail(&quot;GITHUB_BASE_REF&quot;), branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;)), n = 100, path_pkg = &quot;.&quot; ) . The arguments : expr_before_benchmark allows an expression to be executed just before benchmark is run ... is the named expression of length one with code to benchmark branches are names of the branches in character vector n is the number of times benchmarks should be run for each of the branches. path_pkg represents the path to the package . (ii) benchmark_analyze . touchstone::benchmark_analyze() . benchmark_analyze creates artifacts used downstream in the GitHub Action to turn raw benchmark results into text and figures. . Usage . benchmark_analyze( branches = c(branch_get_or_fail(&quot;GITHUB_BASE_REF&quot;), branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;)), names = NULL, ci = 0.95 ) . The arguments : branches are the names of the branches in character vector under consideration names are the names of the branches which is actually used for the analysis. ci represents the confidence level which defaults to 0.95 out of 1 . 6. Running the script . On the R Interactive console, run . touchstone::run_script() . Usage . run_script( path = &quot;touchstone/script.R&quot;, branch = branch_get_or_fail(&quot;GITHUB_HEAD_REF&quot;) ) . The arguments : path is the path to the script to run branch is the name of the branch corresponding to the library . After committing and pushing the workflow files to default branch, Github CI will run the benchmarks on every pull request and on each commit while that pull request is open. .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/touchstone/test/r/git/github/2022/06/01/Touchstone-Review.html",
            "relUrl": "/touchstone/test/r/git/github/2022/06/01/Touchstone-Review.html",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Sample RPerform package usage",
            "content": "Introduction . Rperform is a package that allows R developers to track quantitative performance metrics of their code. It helps to provide changes in a package’s performance metrics related to runtime and memory. It is used to access performance metrics over different git versions and across git branches. It can also be integrated with Travis-CI for performance testing during Travis builds by making changes to the repo’s .travis.yml file. It can prove to be particularly useful while measuring the possible changes which can be introduced by a pull request (PR). . The project was initiated as a part of the Google Summer of Code 2015 program and was accepted into the Google Summer of Code 2016 program. . Installation . You can install the package from github using : | . library(devtools) install_github(&quot;analyticalmonk/Rperform&quot;) . or . devtools::install_github(&quot;analyticalmonk/Rperform&quot;) . Basic examples . NOTE: The Rperform package requires you to set the current directory to the concerned git repository before using the functions. . &gt; setwd(dir = &quot;Path/to/repo&quot;) . The following example illustrates the use of the Rperform::plot_metrics() function on the git repository of the package stringr. | . &gt; setwd(&quot;./stringr&quot;) &gt; library(Rperform) &gt; plot_metrics(test_path = &quot;tests/testthat/test-join.r&quot;, metric = &quot;time&quot;, num_commits = 10, save_data = FALSE, save_plots = FALSE) . . The following example illustrates the use of the Rperform::plot_branchmetrics() function on the git repository of the package stringr. | . &gt; setwd(&quot;./stringr&quot;) &gt; library(Rperform) &gt; plot_branchmetrics(test_path = &quot;tests/testthat/test-interp.r&quot;, metric = &quot;memory&quot;, branch1 = &quot;rperform_test&quot;, branch2 = &quot;master&quot;, save_data = F, save_plots = F) . . The following example illustrates the use of the Rperform::time_compare() and Rperform::mem_compare() functions on the git repository of the package stringr. | . &gt; setwd(&quot;./stringr&quot;) &gt; library(Rperform) &gt; time_compare(test_path = &quot;./tests/testthat/test-dup.r&quot;, num_commits = 2) test_name metric_name status metric_val msg_val date_time 1 basic duplication works time pass 0.001797014 Can now use CRA 2015-01-08 14:09:43 2 basic duplication works time pass 0.001539050 Can now use CRA 2015-01-08 14:09:43 3 basic duplication works time pass 0.001545034 Can now use CRA 2015-01-08 14:09:43 4 0 duplicates equals empty string time pass 0.001019430 Can now use CRA 2015-01-08 14:09:43 5 0 duplicates equals empty string time pass 0.000784386 Can now use CRA 2015-01-08 14:09:43 6 0 duplicates equals empty string time pass 0.000766279 Can now use CRA 2015-01-08 14:09:43 7 test-dup.r time pass 0.003555478 Can now use CRA 2015-01-08 14:09:43 8 test-dup.r time pass 0.003118946 Can now use CRA 2015-01-08 14:09:43 9 test-dup.r time pass 0.003106017 Can now use CRA 2015-01-08 14:09:43 10 basic duplication works time pass 0.001780849 Require latest 2015-01-08 14:03:37 11 basic duplication works time pass 0.001545568 Require latest 2015-01-08 14:03:37 12 basic duplication works time pass 0.001517300 Require latest 2015-01-08 14:03:37 13 0 duplicates equals empty string time pass 0.001028882 Require latest 2015-01-08 14:03:37 14 0 duplicates equals empty string time pass 0.000783847 Require latest 2015-01-08 14:03:37 15 0 duplicates equals empty string time pass 0.000771520 Require latest 2015-01-08 14:03:37 16 test-dup.r time pass 0.003436051 Require latest 2015-01-08 14:03:37 17 test-dup.r time pass 0.003130397 Require latest 2015-01-08 14:03:37 18 test-dup.r time pass 0.003082713 Require latest 2015-01-08 14:03:37 &gt; . &gt; Rperform::mem_compare(test_path = &quot;./tests/testthat/test-join.r&quot;, num_commits = 1) test_name metric_name status metric_val msg_val date_time 11.1 basic case works max_mem_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 11.2 basic case works leak_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 11.3 NULLs are dropped max_mem_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 11.4 NULLs are dropped leak_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 11.5 test-join.r max_mem_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 11.6 test-join.r leak_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 12.1 basic case works max_mem_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 12.2 basic case works leak_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 12.3 NULLs are dropped max_mem_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 12.4 NULLs are dropped leak_mb pass 0.044 Can now use CRA 2015-01-08 14:09:43 12.5 test-join.r max_mem_mb pass 0.144 Can now use CRA 2015-01-08 14:09:43 12.6 test-join.r leak_mb pass 0.144 Can now use CRA 2015-01-08 14:09:43 13.1 basic case works max_mem_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 13.2 basic case works leak_mb pass 0.040 Can now use CRA 2015-01-08 14:09:43 13.3 NULLs are dropped max_mem_mb pass 0.048 Can now use CRA 2015-01-08 14:09:43 13.4 NULLs are dropped leak_mb pass 0.048 Can now use CRA 2015-01-08 14:09:43 13.5 test-join.r max_mem_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 13.6 test-join.r leak_mb pass 0.148 Can now use CRA 2015-01-08 14:09:43 .",
            "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/rperform/test/r/2022/05/24/RPerform.html",
            "relUrl": "/rperform/test/r/2022/05/24/RPerform.html",
            "date": " • May 24, 2022"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://engineerdanny.github.io/GSOC22-RPerform-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}